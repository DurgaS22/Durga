#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;              // Data stored in the node
    struct Node* left;     // Pointer to the left child
    struct Node* right;    // Pointer to the right child
} Node;

Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node)); // Allocate memory for a new node
    if (newNode == NULL) { // Check for memory allocation failure
        printf("Error allocating memory\n");
        exit(1);
    }
    newNode->data = data; // Set the data for the new node
    newNode->left = NULL; // Initialize left child as NULL
    newNode->right = NULL; // Initialize right child as NULL
    return newNode; // Return the newly created node
}

void preorderTraversal(Node* root) {
    if (root != NULL) {
        printf("%d ", root->data);    // Print node data (visit the root)
        preorderTraversal(root->left); // Visit left subtree
        preorderTraversal(root->right); // Visit right subtree
    }
}

void freeTree(Node* root) {
    if (root != NULL) {
        freeTree(root->left);  // Free left subtree
        freeTree(root->right); // Free right subtree
        free(root);            // Free current node
    }
}

int main() {
    
    Node* root = createNode(4);
    root->left = createNode(2);
    root->right = createNode(6);
    root->left->left = createNode(1);
    root->left->right = createNode(3);
    root->right->left = createNode(5);
    root->right->right = createNode(7);

    // Perform a pre-order traversal of the binary tree
    printf("Pre-order traversal: ");
    preorderTraversal(root);
    printf("\n");


    freeTree(root);

    return 0;
}
