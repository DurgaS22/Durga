#include <stdio.h>
#include <stdlib.h>

// Define the structure for a node in the binary tree
typedef struct Node {
    int data;              // Data stored in the node
    struct Node* left;     // Pointer to the left child
    struct Node* right;    // Pointer to the right child
} Node;

// Function to create a new node with the given data
Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node)); // Allocate memory for a new node
    if (newNode == NULL) { // Check for memory allocation failure
        printf("Error allocating memory\n");
        exit(1);
    }
    newNode->data = data; // Set the data for the new node
    newNode->left = NULL; // Initialize left child as NULL
    newNode->right = NULL; // Initialize right child as NULL
    return newNode; // Return the newly created node
}

// Function to perform an in-order traversal of the binary tree
void inorderTraversal(Node* root) {
    if (root != NULL) {
        inorderTraversal(root->left); // Visit left subtree
        printf("%d ", root->data);    // Print node data
        inorderTraversal(root->right); // Visit right subtree
    }
}

int main() {
    // Create nodes for the binary tree
    Node* root = createNode(1);
    root->left = createNode(2);
    root->right = createNode(3);
    root->left->left = createNode(4);
    root->left->right = createNode(5);
    root->right->left = createNode(6);
    root->right->right = createNode(7);

    // Perform an in-order traversal of the binary tree
    printf("In-order traversal: ");
    inorderTraversal(root);
    printf("\n");

    // Free allocated memory (not shown for simplicity)
    // In a real program, you should also free all allocated nodes

    return 0;
}
